#!/bin/bash

set -eo pipefail
#set -x

force=false
umask=022

uname_s=$(uname -s)

usage() {
  if [[ $1 != "" ]]
  then
    echo "error: $1" >&2
  fi
  echo "usage: $0 OPTIONS" >&2
  echo "Use $0 -? for usage help" >&2
  exit 1
}

# copied from intellij-idea-dpkg but not used for now
install_vmoptions() {
  cp jetbrains.vmoptions.README root/etc/jetbrains/$product/
  echo "
Original idea.vmoptions:
" >> root/etc/intellij-idea/jetbrains.vmoptions.README
  cat root/usr/share/jetbrains/intellij-idea/bin/jetbrains.vmoptions >> root/etc/intellij-idea/jetbrains.vmoptions.README

  fn=/tmp/idea.vmoptions.$$
  cp root/usr/share/jetbrains/intellij-idea/bin/idea.vmoptions $fn
  cat $fn | grep -v yjpagent > root/usr/share/jetbrains/intellij-idea/bin/idea.vmoptions
  rm $fn
}

build_common() {
  rm -rf root
  echo "Unpacking tarball"
  mkdir -p root/usr/share/jetbrains/$product
  $tar --strip-components 1 -C root/usr/share/jetbrains/$product -zxf download/$filename
  mkdir -p root/usr/bin

  cat jetbrains.in | \
    sed -e "s,REAL_BIN,$real_bin," \
    > root/usr/bin/$bin_name
  chmod +rx root/usr/bin/$bin_name

  desktop=root/usr/share/applications/$product.desktop
  mkdir -p ${desktop%/*}

  echo "[Desktop Entry]
Exec=/usr/bin/$bin_name
Terminal=false
Type=Application
StartupNotify=true
Comment=$tagline
Categories=Development
Name=$name
Keywords=$categories" > $desktop

case $product_u in
  IIU)
    icon="bin/idea.png"
    ;;
  IIC)
    icon="bin/idea_CE128.png"
    ;;
  CL)
    icon="bin/clion.svg"
    ;;
  WS)
    icon="bin/webstorm.svg"
    ;;
  PCP)
    icon="bin/pycharm.png"
    ;;
  RD)
    icon="bin/rider.png"
    ;;
  GO)
    icon="bin/goland.png"
    ;;
esac

if [[ ! -z $icon ]]
then
  echo "Icon=/usr/share/jetbrains/$product/$icon" >> $desktop
fi

# If idea.license is provided in the bin directory of intellij-idea, this
# license is applied to the genereated package. This allows to generate a
# certified package for the Ultimate edition of the IDE.
if [ -f "$product.license" ]
then
  bin_dir="root/usr/share/jetbrains/$product/bin"
  echo "Copy licence file to $bin_dir"
  cp $product.license $bin_dir
fi
}

join() {
  local IFS="$1"
  shift
  echo "$*"
}

build_debian() {
  build_common

  mkdir -p root/etc/sysctl.d
  cp debian/sysctl-99-jetbrains.conf root/etc/sysctl.d/sysctl-99-$product.conf
  chmod +rx root/usr/bin/$bin_name

  mkdir -p root/DEBIAN

  debian/generate-control "jetbrains-$product" "$version" "$tagline" "$replaces" > root/DEBIAN/control

  cp debian/postinst root/DEBIAN/postinst
  chmod +rx root/DEBIAN/postinst

  echo > debian/fakeroot.save
  FAKEROOT="fakeroot -i debian/fakeroot.save -s debian/fakeroot.save"
  $FAKEROOT -- chown -R root:root root/
  $FAKEROOT -- dpkg-deb -b root $package_filename
  rm debian/fakeroot.save

  if [ "$update_repository" = 1 ]
  then
    pushd .
    cd $repo
    archs="amd64 i386"
    apt-ftparchive packages pool > Packages
    for arch in $archs; do
      Packages=dists/jetbrains/non-free/binary-$arch/Packages
      mkdir -p `dirname $Packages`
      cat Packages | tee $Packages | gzip > $Packages.gz
    done
    rm Packages

    Release=dists/jetbrains/Release
    InRelease=dists/jetbrains/InRelease
    rm -f $Release
    mkdir -p `dirname $Release`

    echo "Architectures: i386 amd64
Components: non-free
Date: `date -R`
Label: Jetbrains
Origin: Jetbrains
Suite: jetbrains" >> $Release
    apt-ftparchive release dists/jetbrains >> $Release
    gpg --clearsign -o $InRelease $Release
    gpg -abs -o $Release.gpg $Release
  fi
}

tar=`which gtar || true`
if [ ! -x "$tar" ]
then
  tar=`which tar`
  if [ ! -x "$tar" ]
  then
    echo "Could not find usable tar" >&2
    exit 1
  fi
fi

# wget
if [ -t 1 ]
then
  wget_opts="-q --progress=bar --show-progress"
else
  wget_opts="-q"
fi

while getopts "ls:p:v:t:F?" flag
do
  case "$flag" in
    l)
      product=""
      break
      ;;
    p)
      product=$OPTARG
      ;;
    v)
      version=$OPTARG
      ;;
    t)
      typ=$OPTARG
      ;;
    F)
      force="true"
      ;;
    ?)
      less README.md
      exit 1
      ;;
  esac
done

if [ -z "$product" ]
then
  echo "Products list:"
  echo ""
  cat products.json |jq -r 'map(.code + " " + .name)|.[]' | while read c d
  do
#    echo $c
#    echo -e $c\t$d
    echo -e "$c\t$d"
  done
  exit 1
fi

product_u="$product"
product=$(tr '[:upper:]' '[:lower:]' <<< $product)

case $product_u in
  IIU)
    real_bin=idea.sh
    replaces=idea-ic,jetbrains-iic,idea-iu
    ;;
  IIC)
    real_bin=idea.sh
    replaces=idea-iu,jetbrains-iiu,idea-ic
    ;;
  CL)
    real_bin=clion.sh
    replaces=clion
    ;;
  WS)
    real_bin=webstorm.sh
    replaces=webstorm
    ;;
  PCP)
    real_bin=pycharm.sh
    replaces=pycharm
    ;;
  RD)
    real_bin=rider.sh
    ;;
  GO)
    real_bin=goland.sh
    ;;
  *)
    usage "Unknown product, needs mapping"
    ;;
esac


readarray -t vars <<< $(cat products.json | jq -r --arg product $product_u '.[] | select(.code==$product) | .cat=(.categories | join(";")) |.name, .description, .cat')
name="${vars[0]}"
tagline="${vars[1]}"
categories="${vars[2]}"

if [[ -z $name ]]
then
  echo "Could not find product in product list from Jetbrains. Available products:"
  cat products.json | jq -r '.[] | "  \(.code)\t\t\(.name)"'
  exit 1
fi

bin_name=jetbrains-$product
real_bin="/usr/share/jetbrains/$product/bin/$real_bin"

if [ -z "$version" ]
then
  if [[ ! -z $typ ]]
  then
    t=(-t "$typ")
  fi
  readarray -t tmp <<< $(./find-latest -c "$product_u" "${t[@]}")
  declare -A map
  for i in ${!tmp[@]}
  do
    v="${tmp[$i]}"
    case $(($i % 2)) in
      0) key="$v" ;;
      1) map[$key]="$v" ;;
    esac
  done
  version="${map[build]}"
  url="${map[link]}"
  size="${map[size]}"
  filename=$(basename $url)
  echo "The latest version is $version"
else
  usage "-v is required for now."
  url="$DEFAULT_DOWNLOAD_URL/$path_expr-$version.tar.gz"
  filename="$product-$version.tar.gz"
fi

package_filename=repository/debian/pool/jetbrains-$product-$version.deb
mkdir -p $(dirname package_filename)

if [ -r "$package_filename" ]
then
  if [ $force = "false" ]
  then
    echo "The requested version ($version) already exist in the repository, add -F to force a re-build of the package" >&2
    exit 1
  else
    echo "WARNING: re-building package for version $version" >&2
  fi
fi
mkdir -p "`dirname $package_filename`"

if [ -z "$src_dir" ]
then
  mkdir -p download

  out="download/$filename"
  if [[ ! -z $size && -s $out ]]
  then
    actual_size=$(stat -c '%s' "$out")
    if [[ $size != $actual_size ]]
    then
      echo "Removing old download"
    fi
  fi

  if [[ ! -s $out ]]
  then
    echo "Downloading version $version..."
    if [ `wget $wget_opts -O "$out" $url; echo $?` != "0" ]
    then
      echo "Could not download $url" >&2
      exit 1
    fi
  else
    echo "Using old download"
  fi

  if [ ! -r $out ]
  then
    echo "wget didn't place the downloaded file where expected: download/$filename" >&2
    exit 1
  fi
fi

build_debian
