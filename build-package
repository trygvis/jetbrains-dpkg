#!/bin/bash

IDEA_PRODUCT_URL="https://www.jetbrains.com/idea/nextversion/"
IDEA_DOWNLOAD_URL="http://download.jetbrains.com/idea"

CLION_PRODUCT_URL="https://confluence.jetbrains.com/display/CLION/Early+Access+Program"
CLION_DOWNLOAD_URL="https://download.jetbrains.com/clion"

WEBSTORM_PRODUCT_URL="https://confluence.jetbrains.com/display/WI/WebStorm+EAP"
WEBSTORM_DOWNLOAD_URL="https://download.jetbrains.com/webstorm"

PYCHARM_PRODUCT_URL="https://confluence.jetbrains.com/pages/viewpage.action?pageId=23004355 https://www.jetbrains.com/pycharm/nextversion/"
PYCHARM_DOWNLOAD_URL="https://download.jetbrains.com/python"

set -e
#set -x

force=false
umask=022

uname_s=$(uname -s)

usage() {
  if [[ $1 != "" ]]
  then
    echo "error: $1" >&2
  fi
  echo "usage: $0 OPTIONS" >&2
  echo "Use $0 -? for usage help" >&2
  exit 1
}

grep_1() {
  set -x
  read url version skip_the_rest < <(cat content | \
      sed -n -e 's,\(href=.[^ "]\),\n\1,gp' | \
      sed -n -e "s,^href.*\(http[^ \"]*\).*>.*$path_expr-\([^<]*\)\.tar\.gz.*,\1 \2,p" | \
      sed -e '/sha256/d' | \
      xargs)
  filename="$product-$version.tar.gz"
}

grep_2() {
  export LC_ALL=C

#  version=$(cat content | grep 'Build: '| sed -n -e 's,.*EAP \([0-9]*\.[0-9]*\.[0-9]*\).*,\1,p' | head -n 1)
  version=$(cat content | perl -wlne '/>Build: / and print ($_ =~ /Build: .*([0-9]{3}\.[0-9]+\.[0-9]+)/);' | head -n 1)

  if [[ $version != "" ]]
  then
    url=$DOWNLOAD_URL/$path_expr-${version}.tar.gz
    filename="$product-$version.tar.gz"
  fi
}

find_latest_from_url() {
  local check_url=$1; shift

  export LC_ALL=C

  echo "Finding latest version from $check_url ..."
  wget --max-redirect 5 -O content -q $check_url

  grep_1
  if [[ $url == "" ]]
  then
    grep_2
  fi
  rm -f content
}

find_latest() {
  if [[ $PRODUCT_URL = "" ]]
  then
    PRODUCT_URL="$DEFAULT_PRODUCT_URL"
  fi

  if [[ $DOWNLOAD_URL = "" ]]
  then
    DOWNLOAD_URL="$DEFAULT_DOWNLOAD_URL"
  fi

  for url in $PRODUCT_URL
  do
    find_latest_from_url "$url"
    if [[ $url != "" ]]
    then
      echo "url        = $url"
      echo "version    = $version"
      echo "filename   = $filename"
      return
    fi
  done

  echo "Unable to find the latest version." >&2
  exit 1
}

# copied from intellij-idea-dpkg but not used for now
install_vmoptions() {
  cp jetbrains.vmoptions.README root/etc/jetbrains/$product/
  echo "
Original idea.vmoptions:
" >> root/etc/intellij-idea/jetbrains.vmoptions.README
  cat root/usr/share/jetbrains/intellij-idea/bin/jetbrains.vmoptions >> root/etc/intellij-idea/jetbrains.vmoptions.README

  fn=/tmp/idea.vmoptions.$$
  cp root/usr/share/jetbrains/intellij-idea/bin/idea.vmoptions $fn
  cat $fn | grep -v yjpagent > root/usr/share/jetbrains/intellij-idea/bin/idea.vmoptions
  rm $fn
}

build_common() {
  rm -rf root
  if [ ! -z "$src_dir" ]
  then
    echo "Copying from $src_dir"
    mkdir -p root/usr/share/jetbrains
    cp -r "$src_dir" root/usr/share/jetbrains/$product
  else
    echo "Unpacking tarball"
    mkdir -p root/usr/share/jetbrains/$product
    $tar --strip-components 1 -C root/usr/share/jetbrains/$product -zxf download/$filename
  fi
  mkdir -p root/usr/bin

  cat jetbrains.in | \
    sed -e "s,REAL_BIN,$real_bin," \
    > root/usr/bin/$bin_name
  chmod +rx root/usr/bin/$bin_name

  desktop=root/usr/share/applications/$product.desktop
  mkdir -p ${desktop%/*}

  echo "[Desktop Entry]
Exec=/usr/bin/$bin_name
Terminal=false
Type=Application
StartupNotify=true
Comment=$tagline
Categories=development;ide;debugger;profiling" > $desktop
  case $product in
    idea-iu)
      echo "Name=IntelliJ IDEA - Ultimate Edition
Icon=/usr/share/jetbrains/$product/bin/idea.png" >> $desktop
      ;;
    idea-ic)
      echo "Name=IntelliJ IDEA - Community Edition
Icon=/usr/share/jetbrains/$product/bin/idea_CE128.png" >> $desktop
      ;;
    clion)
      echo "Name=CLion
Icon=/usr/share/jetbrains/clion/bin/clion.svg" >> $desktop
      ;;
    webstorm)
      echo "Name=WebStorm
Icon=/usr/share/jetbrains/webstorm/bin/webstorm.svg" >> $desktop
      ;;
    pycharm)
      echo "Name=PyCharm
Icon=/usr/share/jetbrains/pycharm/bin/pycharm.png" >> $desktop
      ;;
  esac

#  install_vmoptions

  # If idea.license is provided in the bin directory of intellij-idea, this
  # license is applied to the genereated package. This allows to generate a
  # certified package for the Ultimate edition of the IDE.
  if [ -f "$product.license" ]
  then
    bin_dir="root/usr/share/jetbrains/$product/bin"
    echo "Copy licence file to $bin_dir"
    cp $product.license $bin_dir
  fi
}

join() {
  local IFS="$1"
  shift
  echo "$*"
}

build_debian() {
  build_common

  mkdir -p root/etc/sysctl.d
  cp debian/sysctl-99-jetbrains.conf root/etc/sysctl.d/sysctl-99-$product.conf
  chmod +rx root/usr/bin/$bin_name

  mkdir -p root/DEBIAN

  debian/generate-control "$product" "$version" "$tagline" > root/DEBIAN/control

  cp debian/postinst root/DEBIAN/postinst
  chmod +rx root/DEBIAN/postinst

  echo > debian/fakeroot.save
  FAKEROOT="fakeroot -i debian/fakeroot.save -s debian/fakeroot.save"
  $FAKEROOT -- chown -R root:root root/
  $FAKEROOT -- dpkg-deb -b root $package_filename
  rm debian/fakeroot.save

  if [ "$update_repository" = 1 ]
  then
    pushd .
    cd $repo
    archs="amd64 i386"
    apt-ftparchive packages pool > Packages
    for arch in $archs; do
      Packages=dists/jetbrains/non-free/binary-$arch/Packages
      mkdir -p `dirname $Packages`
      cat Packages | tee $Packages | gzip > $Packages.gz
    done
    rm Packages

    Release=dists/jetbrains/Release
    InRelease=dists/jetbrains/InRelease
    rm -f $Release
    mkdir -p `dirname $Release`

    echo "Architectures: i386 amd64
Components: non-free
Date: `date -R`
Label: Jetbrains
Origin: Jetbrains
Suite: jetbrains" >> $Release
    apt-ftparchive release dists/jetbrains >> $Release
    gpg --clearsign -o $InRelease $Release
    gpg -abs -o $Release.gpg $Release
  fi
}

tar=`which gtar || true`
if [ ! -x "$tar" ]
then
  tar=`which tar`
  if [ ! -x "$tar" ]
  then
    echo "Could not find usable tar" >&2
    exit 1
  fi
fi

# wget
if [ -t 1 ]
then
  wget_opts="-q --progress=bar --show-progress"
else
  wget_opts="-q"
fi

while getopts "s:p:v:uF?" flag
do
  case "$flag" in
    s)
      src_dir=$OPTARG
      ;;
    p) 
      product=$OPTARG

      case "$product" in
        idea-ic|idea-iu|clion|webstorm|pycharm)
          ;;
        *)
          usage "Unknown product"
          ;;
      esac
      ;;
    v)
      version=$OPTARG
      ;;
    u)
      update_repository=1
      ;;
    F)
      force="true"
      ;;
    ?)
      less README.md
      exit 0
      ;;
  esac
done

if [ -z "$product" ]
then
  usage "Missing -p [product] argument"
fi

bin_name=$product
real_bin="/usr/share/jetbrains/$product/bin/$product.sh"
case $product in
  idea-iu)
    DEFAULT_PRODUCT_URL="$IDEA_PRODUCT_URL"
    DEFAULT_DOWNLOAD_URL="$IDEA_DOWNLOAD_URL"
    bin_name=idea
    path_expr=ideaIU
    real_bin="/usr/share/jetbrains/idea-iu/bin/idea.sh"
    tagline="The Most Intelligent Java IDE"
    ;;
  idea-ic)
    DEFAULT_PRODUCT_URL="$IDEA_PRODUCT_URL"
    DEFAULT_DOWNLOAD_URL="$IDEA_DOWNLOAD_URL"
    bin_name=idea
    path_expr=ideaIC
    real_bin="/usr/share/jetbrains/idea-ic/bin/idea.sh"
    tagline="The Most Intelligent Java IDE"
    ;;
  clion)
    DEFAULT_PRODUCT_URL="$CLION_PRODUCT_URL"
    DEFAULT_DOWNLOAD_URL="$CLION_DOWNLOAD_URL"
    path_expr=CLion
    tagline="A cross-platform IDE for C and C++"
    ;;
  webstorm)
    DEFAULT_PRODUCT_URL="$WEBSTORM_PRODUCT_URL"
    DEFAULT_DOWNLOAD_URL="$WEBSTORM_DOWNLOAD_URL"
    path_expr=WebStorm-EAP
    tagline="The Smartest JavaScript IDE"
    ;;
  pycharm)
    DEFAULT_PRODUCT_URL="$PYCHARM_PRODUCT_URL"
    DEFAULT_DOWNLOAD_URL="$PYCHARM_DOWNLOAD_URL"
    path_expr=pycharm-professional
    tagline="The Smartest JavaScript IDE"
    ;;
esac

if [ -z "$src_dir" ]
then
  if [ -z "$version" ]
  then
    find_latest
    echo "The latest version is $version"
  else
    url="$DEFAULT_DOWNLOAD_URL/$path_expr-$version.tar.gz"
    filename="$product-$version.tar.gz"
  fi
else
  if [ -z "$version" ]
  then
    echo "When building from a directory, a version has to be specified with -v." >&2
    exit 1
  fi

  if [ ! -d "$src_dir" ]
  then
    echo "Not a directory: $src_dir" >&2
    exit 1
  fi
fi

package_filename=repository/debian/pool/$product-$version.deb
mkdir -p $(dirname package_filename)

if [ -r "$package_filename" ]
then
  if [ $force = "false" ]
  then
    echo "The requested version ($version) already exist in the repository, add -F to force a re-build of the package" >&2
    exit 1
  else
    echo "WARNING: re-building package for version $version" >&2
  fi
fi
mkdir -p "`dirname $package_filename`"

if [ -z "$src_dir" ]
then
  mkdir -p download

  # It would be possible to use the MD5 sum as a check here, then there would be no need to every force a download
  #if [ -r "download/$filename" ]
  #then
  #  echo "$filename is already downloaded"
  #else
  #  echo "Downloading $url..."
  #  wget -O "download/$filename" $url
  #fi

  # Ideally this would have been using -P and -N to not download the
  # same file every time, but Jetbrains sometimes uses the same filename
  # for several downloads. An alternative is to download the checksum
  # file and use that to check for existing downloads.
  echo "Downloading version $version..."
  if [ `wget $wget_opts -O download/$filename $url; echo $?` != "0" ]
  then
    echo "Could not download $url" >&2
    exit 1
  fi

  if [ ! -r download/$filename ]
  then
    echo "wget didn't place the downloaded file where expected: download/$filename" >&2
    exit 1
  fi
fi

build_debian
